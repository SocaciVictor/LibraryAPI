@page "/authors/edit/{Id:int?}"
@using LibraryAdminPage.Components.Models
@inject LibraryAdminPage.Components.Interfaces.IAuthorService AuthorService
@inject NavigationManager Nav

<h3>@(Id.HasValue ? "Edit Author" : "Create Author")</h3>

@if (Id.HasValue)
{
    <!-- ============== FORMULAR EDIT ============== -->
    <EditForm Model="updateModel" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="updateModel.Name" />
        </div>

        <button type="submit" class="btn btn-success">Save</button>
        <NavLink type="button" class="btn btn-secondary ms-2"
                 href="@("/authors")">
            Cancel
        </NavLink>
    </EditForm>
}
else
{
    <!-- ============== FORMULAR CREATE ============== -->
    <EditForm Model="createModel" OnValidSubmit="HandleCreate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="createModel.Name" />
        </div>

        <button type="submit" class="btn btn-success">Create</button>
        <NavLink type="button" class="btn btn-secondary ms-2"
                 href="@("/authors")">
            Cancel
        </NavLink>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }

    private CreateAuthorDto createModel = new() { Name = "" };
    private UpdateAuthorDto updateModel = new() { Name = "" };

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var dto = await AuthorService.GetByIdAsync(Id.Value);
            if (dto is null)
            {
                Nav.NavigateTo("/authors");
                return;
            }
            // Populăm modelul de edit:
            updateModel = new() { Name = dto.Name };
        }
    }

    private async Task HandleCreate()
    {
        await AuthorService.CreateAsync(createModel);
        Nav.NavigateTo("/authors");
    }

    private async Task HandleUpdate()
    {
        if (Id.HasValue)
            await AuthorService.UpdateAsync(Id.Value, updateModel);
        Nav.NavigateTo("/authors");
    }
}
